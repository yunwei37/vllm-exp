{
  "issue_type": "bug",
  "extracted_from": "/root/yunwei37/vllm-exp/bug-study/analysis_llm/sample_results/vllm/label_based/bug/issues.json",
  "issue": {
    "number": 8477,
    "title": "[Bug]: : CPU silently doesn't support multi-step (--num-scheduler-steps)",
    "body": "### Your current environment\n\n<details>\r\n<summary>The output of `python collect_env.py`</summary>\r\n\r\n```text\r\nCollecting environment information...\r\nINFO 09-13 19:13:45 importing.py:10] Triton not installed; certain GPU-related functions will not be available.\r\nPyTorch version: 2.4.0+cpu\r\nIs debug build: False\r\nCUDA used to build PyTorch: Could not collect\r\nROCM used to build PyTorch: N/A\r\n\r\nOS: Ubuntu 22.04.4 LTS (x86_64)\r\nGCC version: (Ubuntu 12.3.0-1ubuntu1~22.04) 12.3.0\r\nClang version: Could not collect\r\nCMake version: version 3.30.2\r\nLibc version: glibc-2.35\r\n\r\nPython version: 3.10.12 (main, Jul 29 2024, 16:56:48) [GCC 11.4.0] (64-bit runtime)\r\nPython platform: Linux-4.18.0-372.46.1.el8_6.x86_64-x86_64-with-glibc2.35\r\nIs CUDA available: False\r\nCUDA runtime version: Could not collect\r\nCUDA_MODULE_LOADING set to: N/A\r\nGPU models and configuration: \r\nGPU 0: NVIDIA A100-SXM4-80GB\r\n  MIG 3g.40gb     Device  0:\r\n\r\nNvidia driver version: 535.104.05\r\ncuDNN version: Could not collect\r\nHIP runtime version: N/A\r\nMIOpen runtime version: N/A\r\nIs XNNPACK available: True\r\n\r\nCPU:\r\nArchitecture:                    x86_64\r\nCPU op-mode(s):                  32-bit, 64-bit\r\nAddress sizes:                   46 bits physical, 57 bits virtual\r\nByte Order:                      Little Endian\r\nCPU(s):                          80\r\nOn-line CPU(s) list:             0-79\r\nVendor ID:                       GenuineIntel\r\nModel name:                      Intel Xeon Processor (Icelake)\r\nCPU family:                      6\r\nModel:                           134\r\nThread(s) per core:              2\r\nCore(s) per socket:              20\r\nSocket(s):                       2\r\nStepping:                        0\r\nBogoMIPS:                        5600.03\r\nFlags:                           fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves wbnoinvd arat avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid fsrm md_clear arch_capabilities\r\nVirtualization:                  VT-x\r\nHypervisor vendor:               KVM\r\nVirtualization type:             full\r\nL1d cache:                       2.5 MiB (80 instances)\r\nL1i cache:                       2.5 MiB (80 instances)\r\nL2 cache:                        160 MiB (40 instances)\r\nL3 cache:                        32 MiB (2 instances)\r\nNUMA node(s):                    2\r\nNUMA node0 CPU(s):               0-39\r\nNUMA node1 CPU(s):               40-79\r\nVulnerability Itlb multihit:     Not affected\r\nVulnerability L1tf:              Not affected\r\nVulnerability Mds:               Not affected\r\nVulnerability Meltdown:          Not affected\r\nVulnerability Mmio stale data:   Vulnerable: Clear CPU buffers attempted, no microcode; SMT Host state unknown\r\nVulnerability Retbleed:          Not affected\r\nVulnerability Spec store bypass: Mitigation; Speculative Store Bypass disabled via prctl\r\nVulnerability Spectre v1:        Mitigation; usercopy/swapgs barriers and __user pointer sanitization\r\nVulnerability Spectre v2:        Mitigation; Enhanced IBRS, IBPB conditional, RSB filling, PBRSB-eIBRS Not affected\r\nVulnerability Srbds:             Not affected\r\nVulnerability Tsx async abort:   Not affected\r\n\r\nVersions of relevant libraries:\r\n[pip3] intel_extension_for_pytorch==2.4.0+gitfbaa4bc\r\n[pip3] numpy==1.26.4\r\n[pip3] pyzmq==26.2.0\r\n[pip3] torch==2.4.0+cpu\r\n[pip3] torchvision==0.19.0+cpu\r\n[pip3] transformers==4.44.2\r\n[conda] Could not collect\r\nROCM Version: Could not collect\r\nNeuron SDK Version: N/A\r\nvLLM Version: 0.6.0@36bf8150cc3a048d69d9d2196128462014b9599d\r\nvLLM Build Flags:\r\nCUDA Archs: Not Set; ROCm: Disabled; Neuron: Disabled\r\nGPU Topology:\r\n\u001b[4mGPU0\tNIC0\tCPU Affinity\tNUMA Affinity\tGPU NUMA ID\u001b[0m\r\nGPU0\t X \tSYS\t40-79\t1\t\tN/A\r\nNIC0\tSYS\t X \t\t\t\t\r\n\r\nLegend:\r\n\r\n  X    = Self\r\n  SYS  = Connection traversing PCIe as well as the SMP interconnect between NUMA nodes (e.g., QPI/UPI)\r\n  NODE = Connection traversing PCIe as well as the interconnect between PCIe Host Bridges within a NUMA node\r\n  PHB  = Connection traversing PCIe as well as a PCIe Host Bridge (typically the CPU)\r\n  PXB  = Connection traversing multiple PCIe bridges (without traversing the PCIe Host Bridge)\r\n  PIX  = Connection traversing at most a single PCIe bridge\r\n  NV#  = Connection traversing a bonded set of # NVLinks\r\n\r\nNIC Legend:\r\n\r\n  NIC0: mlx5_0\r\n\r\n```\r\n\r\n</details>\r\n\n\n### Model Input Dumps\n\n_No response_\n\n### \ud83d\udc1b Describe the bug\n\nI tested the following script running on a CPU backend which set num_scheduler_steps > 1 to force use mult-step:\r\n\r\n```python\r\nfrom vllm import LLM, SamplingParams\r\n\r\nllm = LLM(model=\"facebook/opt-125M\", \r\n          gpu_memory_utilization=0.4, \r\n          max_model_len=1024,  \r\n          num_scheduler_steps=8\r\n          )\r\n\r\n\r\nparams = SamplingParams(seed=123,  prompt_logprobs=5, temperature=1)\r\n\r\nprompts = [\"How to make pizza?\"]\r\noutputs = llm.generate(prompts, sampling_params=params )\r\n\r\nfor o in outputs:\r\n    print('_________')\r\n    print('### Text')\r\n    print('_________')\r\n    for o2 in o.outputs:\r\n        print(o2.text)\r\n\r\n```\r\n\r\nGot the following output:\r\n```\r\nINFO 09-13 19:33:10 importing.py:10] Triton not installed; certain GPU-related functions will not be available.\r\nWARNING 09-13 19:33:13 arg_utils.py:902] Enabled BlockSpaceManagerV2 because it is required for multi-step (--num-scheduler-steps > 1)\r\nWARNING 09-13 19:33:13 config.py:370] Async output processing is only supported for CUDA or TPU. Disabling it for other platforms.\r\nINFO 09-13 19:33:13 llm_engine.py:213] Initializing an LLM engine (v0.6.0) with config: model='facebook/opt-125M', speculative_config=None, tokenizer='facebook/opt-125M', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.float16, max_seq_len=1024, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cpu, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=facebook/opt-125M, use_v2_block_manager=True, num_scheduler_steps=8, enable_prefix_caching=False, use_async_output_proc=False)\r\n/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\r\n  warnings.warn(\r\nWARNING 09-13 19:33:14 cpu_executor.py:321] float16 is not supported on CPU, casting to bfloat16.\r\nWARNING 09-13 19:33:14 cpu_executor.py:324] CUDA graph is not supported on CPU, fallback to the eager mode.\r\nWARNING 09-13 19:33:14 cpu_executor.py:350] Environment variable VLLM_CPU_KVCACHE_SPACE (GB) for CPU backend is not set, using 4 by default.\r\nINFO 09-13 19:33:14 selector.py:183] Cannot use _Backend.FLASH_ATTN backend on CPU.\r\nINFO 09-13 19:33:14 selector.py:128] Using Torch SDPA backend.\r\nINFO 09-13 19:33:15 selector.py:183] Cannot use _Backend.FLASH_ATTN backend on CPU.\r\nINFO 09-13 19:33:15 selector.py:128] Using Torch SDPA backend.\r\nINFO 09-13 19:33:15 weight_utils.py:235] Using model weights format ['*.bin']\r\nLoading pt checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]\r\n/usr/local/lib/python3.10/dist-packages/vllm/model_executor/model_loader/weight_utils.py:417: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\r\n  state = torch.load(bin_file, map_location=\"cpu\")\r\nLoading pt checkpoint shards: 100% Completed | 1/1 [00:00<00:00,  5.83it/s]\r\nLoading pt checkpoint shards: 100% Completed | 1/1 [00:00<00:00,  5.82it/s]\r\n\r\nINFO 09-13 19:33:16 cpu_executor.py:208] # CPU blocks: 7281\r\nProcessed prompts: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:03<00:00,  3.86s/it, est. speed input: 1.55 toks/s, output: 4.14 toks/s]\r\n_________\r\n### Text\r\n_________\r\n\r\n\r\nMethod\r\n\r\n```\r\n\r\nHowever accordingly to #8198 prompt logs causes vllm to crash when using multi-step. Which does not happen in the above log. This was actually a dummy way to check if the feature is actually active. Moreover checking the code, CPU has several specific classes that make a parallel implementation for CPU backend and it looks like it is not using the parameters of multi-step scheduling. There is also no warning in the log that inform the feature is not workig.\r\n\r\n## Expectation\r\n\r\nAdd a checking in the code to raise an exception or warning to inform the user that the feature is not supported.\r\n\n\n### Before submitting a new issue...\n\n- [X] Make sure you already searched for relevant issues, and asked the chatbot living at the bottom right corner of the [documentation page](https://docs.vllm.ai/en/latest/), which can answer lots of frequently asked questions.",
    "labels": [
      "bug",
      "stale"
    ],
    "state": "closed",
    "created_at": "2024-09-13T19:55:13+00:00",
    "closed_at": "2025-01-13T02:03:03+00:00",
    "comments": 2,
    "reactions": {
      "url": "https://api.github.com/repos/vllm-project/vllm/issues/8477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "author_association": "CONTRIBUTOR",
    "html_url": "https://github.com/vllm-project/vllm/issues/8477"
  }
}